CREATE TABLE IF NOT EXISTS customers(
	customer_id INT GENERATED BY DEFAULT AS IDENTITY,
	customer_name varchar(50),
	customer_age INT NOT NULL,
	customer_email varchar(256) NOT NULL,
	customer_login varchar(256) NOT NULL UNIQUE,
	customer_password varchar(256) NOT NULL,
	bank_card varchar(256) NOT NULL UNIQUE,
	customer_role varchar(50) DEFAULT 'user',
	PRIMARY KEY(customer_id),
	CHECK(customer_age >= 18),
	CHECK(LENGTH(customer_login)>=6),
	CHECK(LENGTH(customer_password)>=6)
);

CREATE TABLE IF NOT EXISTS contracts(
	contract_id INT GENERATED BY DEFAULT AS IDENTITY,
	fk_customer_id INT,
	contract_type varchar(50) NOT NULL,
	contract_price float(2) NOT NULL,
    contract_start date DEFAULT CURRENT_DATE,
	contract_end_date date NOT NULL,
	PRIMARY KEY(contract_id),
	CONSTRAINT fk_contact
		FOREIGN KEY (fk_customer_id)
			REFERENCES customers(customer_id)
);

create or replace function register_customer(
	customer_login_v customers.customer_login%type,
    customer_password_v customers.customer_password%type,
    customer_name_v customers.customer_name%type,
    customer_age_v customers.customer_age%type,
    customer_email_v customers.customer_email%type,
	bank_card_v customers.bank_card%type
) returns text
language plpgsql
as
$body$
declare
   status text;
begin

	IF customer_name_v LIKE '' then
	customer_name_v := NULL;
	END IF;

	INSERT INTO customers(customer_name,customer_age,customer_email,customer_login,customer_password,bank_card)
	VALUES (customer_name_v,customer_age_v,customer_email_v,customer_login_v,customer_password_v,bank_card_v);
	status := 'Done!';

	return status;
	exception
	   when others then
	      status := 'Error!';
		  return status;
end;
$body$

create or replace function login_customer(
	customer_login_email customers.customer_login%type,
    customer_password_v customers.customer_password%type
) returns INT
language plpgsql
as
$body$
declare
   found_id INT;
begin

	SELECT customers.customer_id
		INTO found_id
			FROM customers
				WHERE (customers.customer_login LIKE customer_login_email AND customers.customer_password LIKE customer_password_v) OR
					  (customers.customer_email LIKE customer_login_email AND customers.customer_password LIKE customer_password_v);

	IF found_id IS NULL then
	found_id := -1;
	END IF;

	return found_id;
	exception
	   when others then
		  return -1;
end;
$body$

create or replace function get_customer_info(
   c_id int
) RETURNS customers
language sql
as
$body$
  select * from customers
  where customers.customer_id = c_id;
$body$;

create or replace function update_customer(
	c_id customers.customer_id%type,
	customer_login_v customers.customer_login%type,
    customer_name_v customers.customer_name%type,
    customer_age_v customers.customer_age%type,
    customer_email_v customers.customer_email%type,
	bank_card_v customers.bank_card%type
) returns text
language plpgsql
as
$body$
declare
   status text;
begin

	IF customer_name_v LIKE '' then
	customer_name_v := NULL;
	END IF;

	UPDATE customers
	SET (customer_login,customer_name,customer_name,customer_email,bank_card) = (customer_login_v,customer_name_v,customer_age_v,customer_email_v,bank_card_v)
	WHERE customers.customer_id = c_id;

	status := 'Successfully updated';

	return status;
	exception
	   when others then
	      status := 'Error!';
		  return status;
end;
$body$

create or replace function create_contract(
	fk_customer_id_v contracts.fk_customer_id%TYPE,
	contract_type_v contracts.contract_type%TYPE,
	contract_price_v contracts.contract_price%TYPE,
	contract_end_date_v contracts.contract_end_date%TYPE
) returns text
language plpgsql
as
$body$
declare
   status int;
begin

	INSERT INTO contracts(fk_customer_id,contract_type,contract_price,contract_end_date)
	VALUES (fk_customer_id_v,contract_type_v,contract_price_v,contract_end_date_v);

	status := currval(pg_get_serial_sequence('contracts','contract_id'));

	return status;
end;
$body$

create or replace function get_contract_by_customer(
   c_id int
) RETURNS contracts
language sql
as
$body$
  select * from contracts
  where contracts.fk_customer_id = c_id;
$body$;

